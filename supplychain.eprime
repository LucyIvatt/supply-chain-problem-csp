language ESSENCE' 1.0

$ PARAMETERS
$ Number of shops, and their demands.
given nShops: int(1..)
given demands : matrix indexed by [int(1..nShops)] of int(1..)

$ Number of suppliers, their package sizes, and their package costs.
given nSuppliers: int(1..)
given packageSize : matrix indexed by [int(1..nSuppliers)] of int(1..) $ Assumes no empty packages
given packageCost : matrix indexed by [int(1..nSuppliers)] of int(1..) $ Assumes no free packages

$ The amount of excess stock that each store can store
given excessStockLimit: int(0..)

$ CONSTANTS
$ Array containing the maximum number of orders each shop will ever need to make to fufill their demands.
$ Largest of these values is also defined and used to bound the solution matrix.
letting maxOrderByShop be [(demands[shop] / min(packageSize)) + 1 | shop: int(1..nShops)]
letting maxOrderNum be max(maxOrderByShop)

$ VARIABLE
$ Explicit representation of the number of orders made by shops with each supplier.
find allocations: matrix indexed by [int(1..nShops), int(1..nSuppliers)] of int(0..maxOrderNum)

$ OBJECTIVE FUNCTION
$ Minimises the sum of the costs of all deliveries to all shops  
minimising(
    sum([
        allocations[shop, supplier] * packageCost[supplier] | shop : int(1..nShops), supplier: int(1..nSuppliers)
    ])
)

$ CONSTRAINTS
such that

$ Each shop doesn't make more than the maximum number of orders neccessary to fufill demand (Shops demand / smallest package size)
$ Used to reduce the search space and time required to find a solution
forAll shop: int(1..nShops) .
    sum([allocations[shop, supplier] | supplier: int(1..nSuppliers)]) <= maxOrderByShop[shop],

$ Each shop must have enough stock to meet its demand
forAll shop: int(1..nShops) .
    sum([allocations[shop, supplier]*packageSize[supplier] | supplier: int(1..nSuppliers)]) >= demands[shop],

$ Each shop must not have more stock than its demand plus the excess stock limit
forAll shop: int(1..nShops) .
    sum([allocations[shop, supplier]*packageSize[supplier] | supplier: int(1..nSuppliers)]) <= demands[shop] + excessStockLimit



